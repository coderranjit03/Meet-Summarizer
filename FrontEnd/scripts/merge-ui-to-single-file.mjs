import fs from 'fs';
import path from 'path';

const uiDir = path.resolve(process.cwd(), 'client/components/ui');
const outFile = path.join(uiDir, 'ui-bundle.jsx');

const files = fs.readdirSync(uiDir).filter(f => f.endsWith('.jsx') || f.endsWith('.js'))
  .filter(f => !['index.jsx','ui-bundle.jsx','use-toast.js'].includes(f))
  .sort();

const externalImports = new Map();
const exportedSymbols = new Set();
let body = '';

for (const file of files) {
  const content = fs.readFileSync(path.join(uiDir, file), 'utf8');
  const lines = content.split(/\r?\n/);
  const keptLines = [];

  for (const line of lines) {
    const imp = line.match(/^\s*import\s+([\s\S]+?)\s+from\s+['"]([^'"]+)['"];?\s*$/);
    if (imp) {
      const from = imp[2];
      if (from.startsWith('./') || from.startsWith('../')) {
        // local ui imports will be resolved in-bundle; skip them
        continue;
      } else {
        // external import - collect
        externalImports.set(line, line);
        continue;
      }
    }

    // capture exported symbol names from `export { A, B }` or `export const X` or `export function`
    const exportList = line.match(/^\s*export\s*\{\s*([^}]+)\s*\}/);
    if (exportList) {
      const names = exportList[1].split(',').map(s=>s.trim().split(/\sas\s/)[0].trim());
      for (const n of names) exportedSymbols.add(n);
      // skip this export line (we'll export at the end)
      continue;
    }
    const exportConst = line.match(/^\s*export\s+(const|let|var)\s+(\w+)/);
    if (exportConst) {
      exportedSymbols.add(exportConst[2]);
      // convert to plain const/let/var
      keptLines.push(line.replace(/^\s*export\s+/, ''));
      continue;
    }
    const exportFunc = line.match(/^\s*export\s+function\s+(\w+)/);
    if (exportFunc) {
      exportedSymbols.add(exportFunc[1]);
      // convert to function declaration (remove export)
      keptLines.push(line.replace(/^\s*export\s+/, ''));
      continue;
    }
    const exportDefault = line.match(/^\s*export\s+default\s+(\w+)/);
    if (exportDefault) {
      // default export of a named binding
      const name = exportDefault[1];
      exportedSymbols.add(name);
      keptLines.push(line.replace(/^\s*export\s+default\s+/, 'const DEFAULT_')); // unlikely but keep
      continue;
    }

    // otherwise keep line
    keptLines.push(line);
  }

  body += `\n// ---- from: ${file} ----\n` + keptLines.join('\n') + '\n';
}

const importsText = Array.from(externalImports.keys()).join('\n') + '\n\n';
const exportText = `\nexport { ${Array.from(exportedSymbols).join(', ')} }\n`;

const final = `// AUTO-GENERATED ui bundle\n// Generated by scripts/merge-ui-to-single-file.mjs\n\n${importsText}${body}${exportText}`;

fs.writeFileSync(outFile, final, 'utf8');
console.log('Wrote', outFile);
console.log('Files merged:', files.length);
console.log('Exports:', Array.from(exportedSymbols).join(', '));
console.log('Next step: review ui-bundle.jsx and, when ready, remove individual files and update imports to "@/components/ui/ui-bundle.jsx" or normalize to index.jsx.');
